{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","App","incrementSong","ArtistID","index","state","Artists","len","Artist","songDict","length","console","log","setState","prevState","Object","assign","decrementSong","makeSongDict","response","artistID","tracks","map","track","preview_url","getTopArtists","getMyTopArtists","then","items","forEach","artist","id","images","url","name","popularity","getRelatedArtists","getArtistRelatedArtists","artists","playMusic","currentlyPlaying","pause","CurrentPlaying","Audio","play","getArtistTopTracks","saveSong","addToMySavedTracks","stopMusic","token","getHashParams","access_token","setAccessToken","loggedIn","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","className","href","this","img","key","ID","Name","alt","src","Image","onClick","onMouseEnter","onMouseOut","Pop","size","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b88670f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { FaPlus, \n        FaMinus,\n        FaChevronRight,\n        FaChevronLeft,\n} from \"react-icons/fa\";\nimport { IconContext } from \"react-icons\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { importDeclaration } from '@babel/types';\n//import { importDefaultSpecifier } from '@babel/types';\n//import { conditionalExpression } from '@babel/types';\nvar spotifyApi = new SpotifyWebApi();\nclass App extends Component {\n  constructor(){\n    super();\n    var params = this.getHashParams();\n    var token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      images: false,\n      currentlyPlaying: null,\n      Artists: {}\n    } \n  }\n  \n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n\n\n  incrementSong=(ArtistID)=>{\n   let index = this.state.Artists[ArtistID]['CurrentPlaying']\n   let len = this.state.Artist[ArtistID].songDict.length\n   console.log(index)\n   console.log(len)\n   this.setState(prevState => {\n    let Artist = Object.assign({}, prevState.Artists);  // creating copy of state variable jasper\n    Artist[ArtistID]['CurrentPlaying'] =  index+1===len ? 0 : index+1   // update the name property, assign a new value                 \n    return {Artist};                                 // return new object jasper object\n  })\n  console.log(this.state.Artists[ArtistID]['CurrentPlaying'])\n  }\n\n  decrementSong=(ArtistID)=>{\n    let index = this.state.Artists[ArtistID]['CurrentPlaying']\n    let len = this.state.Artist[ArtistID].songDict.length\n    console.log(index)\n    console.log(len)\n    this.setState(prevState => {\n     let Artist = Object.assign({}, prevState.Artists);  // creating copy of state variable jasper\n     Artist[ArtistID]['CurrentPlaying'] =  index-1===-1 ? len-1 : index-1   // update the name property, assign a new value                 \n     return {Artist};                                 // return new object jasper object\n   })\n   console.log(this.state.Artists[ArtistID]['CurrentPlaying'])\n   }\n  \n  makeSongDict=(response,artistID)=>{\n    this.setState(prevState => {\n      let Artist = Object.assign({}, prevState.Artists);  // creating copy of state variable jasper\n      Artist[artistID]['songDict'] =  response.tracks.map((track)=>{\n          return  track.preview_url\n      })                  // update the name property, assign a new value                 \n      return {Artist};                                 // return new object jasper object\n    })\n  }\n\n\n\n\n\n  getTopArtists=()=>{\n    spotifyApi.getMyTopArtists()\n    .then((response)=>{\n      response.items.forEach((artist)=> { \n        this.setState(({ Artists }) => ({\n         Artists: {\n           ...Artists,\n           [artist.id]: {\"Image\": artist.images ? artist.images[0].url : 'https://i1.sndcdn.com/avatars-000047137234-96td0a-t500x500.jpg', \n           \"Name\": artist.name, \n           \"songDict\": null, \n           \"Pop\": artist.popularity,\n           \"CurrentPlaying\": 0,\n            \"CurrentlyShown\": null }\n         }\n       }))\n  })  \n      this.setState({\n          images: response.items.map(function (artist) { \n      return {\"Artist\": artist.name, \n              \"Image\": artist.images ? artist.images[0].url : 'https://i1.sndcdn.com/avatars-000047137234-96td0a-t500x500.jpg', \n              \"ID\": artist.id}\n       }) \n    })\n  })\n  }\n\n\n\ngetRelatedArtists=(ArtistID)=>{\n  console.log(ArtistID)\n  spotifyApi.getArtistRelatedArtists(ArtistID)\n  .then((response)=>{\n    response.artists.forEach((artist)=> { \n      this.setState(({ Artists }) => ({\n       Artists: {\n         ...Artists,\n         [artist.id]: {\n          \"Image\": artist.images ? artist.images[0].url : 'https://i1.sndcdn.com/avatars-000047137234-96td0a-t500x500.jpg', \n         \"Name\": artist.name, \n         \"songDict\": null, \n         \"Pop\": artist.popularity,\n         \"CurrentPlaying\": 0,\n          \"CurrentlyShown\": null }\n       }\n     }))\n   })  \n    this.setState({\n        images: response.artists.map(function (artist) { \n    return {\"Artist\": artist.name, \n    \"Image\": artist.images ? artist.images[0].url : 'https://i1.sndcdn.com/avatars-000047137234-96td0a-t500x500.jpg', \n            \"ID\": artist.id }\n     }) \n  })\n})\n}\n\n\nplayMusic=(artistID)=>{\n  if (!this.state.Artists[artistID].songDict){\n  spotifyApi.getArtistTopTracks(artistID,\"US\")\n  .then((response)=>{ \n    this.makeSongDict(response,artistID)\n    this.state.currentlyPlaying && this.state.currentlyPlaying.pause()\n\n    let index = this.state.Artists[artistID].CurrentPlaying\n    this.setState({\n        currentlyPlaying: new Audio(this.state.Artists[artistID].songDict[index]) || null\n     }) \n     this.state.currentlyPlaying && this.state.currentlyPlaying.play()\n     console.log(this.state.Artists)\n  }) }\n  else{\n    this.state.currentlyPlaying && this.state.currentlyPlaying.pause()\n    let index = this.state.Artists[artistID].CurrentPlaying\n    this.setState({\n        currentlyPlaying: new Audio(this.state.Artists[artistID].songDict[index]) || null\n     },()=>{\n     this.state.currentlyPlaying.play()})\n     console.log(this.state.Artists)\n  }\n}\n\n\nsaveSong=(artistID)=>{\n  spotifyApi.getArtistTopTracks(artistID,\"US\")\n  .then((response)=>{ \n    let index= this.state.Artists[artistID].CurrentPlaying\n     let id = response.tracks[index].id\n     spotifyApi.addToMySavedTracks([id]).then((response)=>console.log(response))\n     })\n}\n\nstopMusic=()=>{\n  this.state.currentlyPlaying && this.state.currentlyPlaying.pause()\n  this.setState({\n    currentlyPlaying: null\n }) \n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <a href='https://mherrity.github.io/SpotifyProyectoDos/8888' > \n        <button>Login To Spotify </button>\n        </a>\n      \n          \n         \n          \n        <div className=\"containerParent\">\n      \n      {this.state.images && this.state.images.map((img) => (\n       \n        <div key= {img.ID} className=\"container\">\n        < img key= {img.Name} \n        className=\"circular--portrait\" \n        alt={img.Artist} \n        src = {img.Image} \n        onClick={()=>this.getRelatedArtists(img.ID)}\n        onMouseEnter={()=>this.playMusic(img.ID)}\n        onMouseOut={()=>this.stopMusic()}\n         />\n        <div  key= {img.Name} className=\"centered\">{img.Artist}</div>\n     \n       \n      <h1 className='Popularity'>{this.state.Artists[img.ID].Pop}</h1>\n      <FaPlus className='green-plus' size={35} onClick={()=>this.saveSong(img.ID)}/>\n      <FaChevronLeft className='chevron-left' size={20} onClick={()=>this.decrementSong(img.ID)} />\n      <FaChevronRight className='chevron-right' size={20} onClick={()=>this.incrementSong(img.ID)} />\n         </div>\n       \n          ))}\n           \n        </div>\n      \n       \n        { this.state.loggedIn &&\n          <button onClick={() => this.getTopArtists()}>\n            Get Top Artists\n          </button>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}