{"version":3,"sources":["Login.js","App.js","serviceWorker.js","index.js"],"names":["Login","alt","src","Component","spotifyApi","SpotifyWebApi","App","onSuccess","response","setAccessToken","access_token","setState","token","incrementSong","ArtistID","index","state","Artists","len","Artist","songDict","length","console","log","prevState","Object","assign","decrementSong","makeSongDict","artistID","tracks","map","track","preview_url","getTopArtists","getMyTopArtists","then","items","forEach","artist","id","images","url","name","popularity","getRelatedArtists","getArtistRelatedArtists","artists","playMusic","currentlyPlaying","pause","CurrentPlaying","Audio","play","getArtistTopTracks","saveSong","addToMySavedTracks","stopMusic","className","clientId","redirectUri","scope","this","img","key","ID","Name","Image","onClick","onMouseEnter","onMouseOut","Pop","size","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdfb4a16.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nexport default class Login extends Component {\n\n    render(){\n    return (\n        <img alt='whoops' src= 'https://images.pexels.com/photos/50582/selfie-monkey-self-portrait-macaca-nigra-50582.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500'/>\n    );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { FaPlus, \n        FaMinus,\n        FaChevronRight,\n        FaChevronLeft,\n} from \"react-icons/fa\";\nimport { IconContext } from \"react-icons\";\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { importDeclaration } from '@babel/types';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport SpotifyLogin from 'react-spotify-login';\n//import { importDefaultSpecifier } from '@babel/types';\n//import { conditionalExpression } from '@babel/types';\n\n\n\nvar spotifyApi = new SpotifyWebApi();\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      images: false,\n      currentlyPlaying: null,\n      Artists: {},\n      token: null\n    }\n  }\n\n  onSuccess=(response)=>{\n    spotifyApi.setAccessToken(response.access_token)\n    this.setState({token: response.access_token})\n  }\n\n\n\n  incrementSong=(ArtistID)=>{\n   let index = this.state.Artists[ArtistID]['CurrentPlaying']\n   let len = this.state.Artist[ArtistID].songDict.length\n   console.log(index)\n   console.log(len)\n   this.setState(prevState => {\n    let Artist = Object.assign({}, prevState.Artists);  // creating copy of state variable jasper\n    Artist[ArtistID]['CurrentPlaying'] =  index+1===len ? 0 : index+1   // update the name property, assign a new value                 \n    return {Artist};                                 // return new object jasper object\n  })\n  console.log(this.state.Artists[ArtistID]['CurrentPlaying'])\n  }\n\n  decrementSong=(ArtistID)=>{\n    let index = this.state.Artists[ArtistID]['CurrentPlaying']\n    let len = this.state.Artist[ArtistID].songDict.length\n    console.log(index)\n    console.log(len)\n    this.setState(prevState => {\n     let Artist = Object.assign({}, prevState.Artists);  // creating copy of state variable jasper\n     Artist[ArtistID]['CurrentPlaying'] =  index-1===-1 ? len-1 : index-1   // update the name property, assign a new value                 \n     return {Artist};                                 // return new object jasper object\n   })\n   console.log(this.state.Artists[ArtistID]['CurrentPlaying'])\n   }\n  \n  makeSongDict=(response,artistID)=>{\n    this.setState(prevState => {\n      let Artist = Object.assign({}, prevState.Artists);  // creating copy of state variable jasper\n      Artist[artistID]['songDict'] =  response.tracks.map((track)=>{\n          return  track.preview_url\n      })                  // update the name property, assign a new value                 \n      return {Artist};                                 // return new object jasper object\n    })\n  }\n\n\n\n\n\n  getTopArtists=()=>{\n    spotifyApi.getMyTopArtists()\n    .then((response)=>{\n      response.items.forEach((artist)=> { \n        this.setState(({ Artists }) => ({\n         Artists: {\n           ...Artists,\n           [artist.id]: {\"Image\": artist.images ? artist.images[0].url : 'https://i1.sndcdn.com/avatars-000047137234-96td0a-t500x500.jpg', \n           \"Name\": artist.name, \n           \"songDict\": null, \n           \"Pop\": artist.popularity,\n           \"CurrentPlaying\": 0,\n            \"CurrentlyShown\": null }\n         }\n       }))\n  })  \n      this.setState({\n          images: response.items.map(function (artist) { \n      return {\"Artist\": artist.name, \n              \"Image\": artist.images ? artist.images[0].url : 'https://i1.sndcdn.com/avatars-000047137234-96td0a-t500x500.jpg', \n              \"ID\": artist.id}\n       }) \n    })\n  })\n  }\n\n\n\ngetRelatedArtists=(ArtistID)=>{\n  console.log(ArtistID)\n  spotifyApi.getArtistRelatedArtists(ArtistID)\n  .then((response)=>{\n    response.artists.forEach((artist)=> { \n      this.setState(({ Artists }) => ({\n       Artists: {\n         ...Artists,\n         [artist.id]: {\n          \"Image\": artist.images ? artist.images[0].url : 'https://i1.sndcdn.com/avatars-000047137234-96td0a-t500x500.jpg', \n         \"Name\": artist.name, \n         \"songDict\": null, \n         \"Pop\": artist.popularity,\n         \"CurrentPlaying\": 0,\n          \"CurrentlyShown\": null }\n       }\n     }))\n   })  \n    this.setState({\n        images: response.artists.map(function (artist) { \n    return {\"Artist\": artist.name, \n    \"Image\": artist.images ? artist.images[0].url : 'https://i1.sndcdn.com/avatars-000047137234-96td0a-t500x500.jpg', \n            \"ID\": artist.id }\n     }) \n  })\n})\n}\n\n\nplayMusic=(artistID)=>{\n  if (!this.state.Artists[artistID].songDict){\n  spotifyApi.getArtistTopTracks(artistID,\"US\")\n  .then((response)=>{ \n    this.makeSongDict(response,artistID)\n    this.state.currentlyPlaying && this.state.currentlyPlaying.pause()\n\n    let index = this.state.Artists[artistID].CurrentPlaying\n    this.setState({\n        currentlyPlaying: new Audio(this.state.Artists[artistID].songDict[index]) || null\n     }) \n     this.state.currentlyPlaying && this.state.currentlyPlaying.play()\n     console.log(this.state.Artists)\n  }) }\n  else{\n    this.state.currentlyPlaying && this.state.currentlyPlaying.pause()\n    let index = this.state.Artists[artistID].CurrentPlaying\n    this.setState({\n        currentlyPlaying: new Audio(this.state.Artists[artistID].songDict[index]) || null\n     },()=>{\n     this.state.currentlyPlaying.play()})\n     console.log(this.state.Artists)\n  }\n}\n\n\nsaveSong=(artistID)=>{\n  spotifyApi.getArtistTopTracks(artistID,\"US\")\n  .then((response)=>{ \n    let index= this.state.Artists[artistID].CurrentPlaying\n     let id = response.tracks[index].id\n     spotifyApi.addToMySavedTracks([id]).then((response)=>console.log(response))\n     })\n}\n\nstopMusic=()=>{\n  this.state.currentlyPlaying && this.state.currentlyPlaying.pause()\n  this.setState({\n    currentlyPlaying: null\n }) \n}\n\n  render() {\n    return (\n    \n      <div className=\"App\">\n        \n        <SpotifyLogin \n        clientId='e5a3b8fc89bc4329808110b17b0ab96e'\n        redirectUri= 'https://mherrity.github.io/SpotifyProyectoDos/callback'\n        scope= 'user-read-private user-read-email user-library-read user-top-read user-library-modify'\n        onSuccess={ (response)=>{this.onSuccess(response)} }\n        />\n          \n        <div className=\"containerParent\">\n      \n      {this.state.images && this.state.images.map((img) => (\n       \n        <div key= {img.ID} className=\"container\">\n        < img key= {img.Name} \n        className=\"circular--portrait\" \n        alt={img.Artist} \n        src = {img.Image} \n        onClick={()=>this.getRelatedArtists(img.ID)}\n        onMouseEnter={()=>this.playMusic(img.ID)}\n        onMouseOut={()=>this.stopMusic()}\n         />\n        <div  key= {img.Name} className=\"centered\">{img.Artist}</div>\n     \n       \n      <h1 className='Popularity'>{this.state.Artists[img.ID].Pop}</h1>\n      <FaPlus className='green-plus' size={35} onClick={()=>this.saveSong(img.ID)}/>\n      <FaChevronLeft className='chevron-left' size={20} onClick={()=>this.decrementSong(img.ID)} />\n      <FaChevronRight className='chevron-right' size={20} onClick={()=>this.incrementSong(img.ID)} />\n         </div>\n       \n          ))}\n           \n        </div>\n      \n       \n        {this.state.token &&\n          <button onClick={() => this.getTopArtists()}>\n            Get Top Artists\n          </button>\n        }\n      </div>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Login from './Login'\nimport App from './App';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\n\n\n//import OAuth from './auth-server/authorization_code/public/index'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n    <Router>\n     <Route exact path ='/' component = {App}/>\n     <Route exact path ='/callback' component = {Login}/>\n    </Router>\n    \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}